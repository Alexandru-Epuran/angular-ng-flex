/**
 * Mock API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional } from "@angular/core";
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from "@angular/common/http";
import { CustomHttpParameterCodec } from "../encoder";
import { Observable, of } from "rxjs";

// @ts-ignore
import { User } from "../model/user";

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from "../variables";
import { Configuration } from "../configuration";

@Injectable({
    providedIn: "root",
})
export class DefaultService {
    protected basePath = "http://localhost:3000";
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(
        protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string | string[],
        @Optional() configuration: Configuration
    ) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== "string") {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== "string") {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    // Sample mock data for users
    private mockUsers: User[] = [
        { id: 1, name: "John Doe", email: "john.doe@example.com" },
        { id: 2, name: "Jane Smith", email: "jane.smith@example.com" },
        { id: 3, name: "Bob Johnson", email: "bob.johnson@example.com" },
        { id: 4, name: "Alice Brown", email: "alice.brown@example.com" },
        { id: 5, name: "Charlie Davis", email: "charlie.davis@example.com" },
        { id: 6, name: "Dave Miller", email: "dave.miller@example.com" },
        { id: 7, name: "Eve Smith", email: "eve.smith@example.com" },
        { id: 8, name: "Frank Johnson", email: "frank.johnson@example.com" },
        { id: 9, name: "Grace Brown", email: "grace.brown@example.com" },
        { id: 10, name: "Heidi Davis", email: "heidi.davis@example.com" },
        { id: 11, name: "Ivan Miller", email: "ivan.miller@example.com" },
        { id: 12, name: "Jack Brown", email: "jack.brown@example.com" },
        { id: 13, name: "John Brown", email: "john.brown@example.com" },
        { id: 14, name: "Joseph Davis", email: "joseph.davis@example.com" },
        { id: 15, name: "Julia Smith", email: "julia.smith@example.com" },
        { id: 16, name: "Karen Johnson", email: "karen.johnson@example.com" },
        { id: 17, name: "Laura Brown", email: "laura.brown@example.com" },
        { id: 18, name: "Michael Davis", email: "michael.davis@example.com" },
        { id: 19, name: "Nancy Miller", email: "nancy.miller@example.com" },
        { id: 20, name: "Olivia Brown", email: "olivia.brown@example.com" },
    ];

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach(elem => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                    throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach(k => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k)));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Get list of users
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersGet(
        observe?: "body",
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: "application/json"; context?: HttpContext; transferCache?: boolean }
    ): Observable<User[]>;
    public usersGet(
        observe?: "response",
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: "application/json"; context?: HttpContext; transferCache?: boolean }
    ): Observable<HttpResponse<User[]>>;
    public usersGet(
        observe?: "events",
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: "application/json"; context?: HttpContext; transferCache?: boolean }
    ): Observable<HttpEvent<User[]>>;
    public usersGet(
        observe: any = "body",
        reportProgress = false,
        options?: { httpHeaderAccept?: "application/json"; context?: HttpContext; transferCache?: boolean }
    ): Observable<any> {
        const useMockData = true; // Toggle this flag to switch between mock data and HTTP request

        if (useMockData) {
            return of(this.mockUsers);
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = ["application/json"];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        let responseType_: "text" | "json" | "blob" = "json";
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
                responseType_ = "text";
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = "json";
            } else {
                responseType_ = "blob";
            }
        }

        const localVarPath = `/users`;
        return this.httpClient.request<User[]>("get", `${this.configuration.basePath}${localVarPath}`, {
            context: localVarHttpContext,
            responseType: responseType_ as any,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            transferCache: localVarTransferCache,
            reportProgress: reportProgress,
        });
    }

    /**
     * Create a new user
     * @param user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersPost(
        user?: User,
        observe?: "body",
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean }
    ): Observable<any>;
    public usersPost(
        user?: User,
        observe?: "response",
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean }
    ): Observable<HttpResponse<any>>;
    public usersPost(
        user?: User,
        observe?: "events",
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean }
    ): Observable<HttpEvent<any>>;
    public usersPost(
        user?: User,
        observe: any = "body",
        reportProgress = false,
        options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean }
    ): Observable<any> {
        // Return mock data as Observable for body requests
        if (observe === "body") {
            return of(this.mockUsers);
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set("Accept", localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = ["application/json"];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set("Content-Type", httpContentTypeSelected);
        }

        let responseType_: "text" | "json" | "blob" = "json";
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
                responseType_ = "text";
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = "json";
            } else {
                responseType_ = "blob";
            }
        }

        const localVarPath = `/users`;
        return this.httpClient.request<any>("post", `${this.configuration.basePath}${localVarPath}`, {
            context: localVarHttpContext,
            body: user,
            responseType: responseType_ as any,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            transferCache: localVarTransferCache,
            reportProgress: reportProgress,
        });
    }
}
